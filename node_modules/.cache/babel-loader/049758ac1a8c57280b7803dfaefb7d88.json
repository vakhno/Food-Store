{"ast":null,"code":"import { useContext, useState, useCallback, createElement, useMemo } from 'react';\nimport { createNamedContext, useForceUpdate, usePrevious, useIsomorphicLayoutEffect, noop } from '@reach/utils';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction createDescendantContext(name, initialValue) {\n  if (initialValue === void 0) {\n    initialValue = {};\n  }\n\n  var descendants = [];\n  return createNamedContext(name, _extends({\n    descendants: descendants,\n    registerDescendant: noop,\n    unregisterDescendant: noop\n  }, initialValue));\n}\n/**\r\n * This hook registers our descendant by passing it into an array. We can then\r\n * search that array by to find its index when registering it in the component.\r\n * We use this for focus management, keyboard navigation, and typeahead\r\n * functionality for some components.\r\n *\r\n * The hook accepts the element node and (optionally) a key. The key is useful\r\n * if multiple descendants have identical text values and we need to\r\n * differentiate siblings for some reason.\r\n *\r\n * Our main goals with this are:\r\n *   1) maximum composability,\r\n *   2) minimal API friction\r\n *   3) SSR compatibility*\r\n *   4) concurrent safe\r\n *   5) index always up-to-date with the tree despite changes\r\n *   6) works with memoization of any component in the tree (hopefully)\r\n *\r\n * * As for SSR, the good news is that we don't actually need the index on the\r\n * server for most use-cases, as we are only using it to determine the order of\r\n * composed descendants for keyboard navigation. However, in the few cases where\r\n * this is not the case, we can require an explicit index from the app.\r\n */\n\n\nfunction useDescendant(descendant, context, indexProp) {\n  var forceUpdate = useForceUpdate();\n\n  var _React$useContext = useContext(context),\n      registerDescendant = _React$useContext.registerDescendant,\n      unregisterDescendant = _React$useContext.unregisterDescendant,\n      descendants = _React$useContext.descendants; // This will initially return -1 because we haven't registered the descendant\n  // on the first render. After we register, this will then return the correct\n  // index on the following render and we will re-register descendants\n  // so that everything is up-to-date before the user interacts with a\n  // collection.\n\n\n  var index = indexProp !== null && indexProp !== void 0 ? indexProp : descendants.findIndex(function (item) {\n    return item.element === descendant.element;\n  });\n  var previousDescendants = usePrevious(descendants); // We also need to re-register descendants any time ANY of the other\n  // descendants have changed. My brain was melting when I wrote this and it\n  // feels a little off, but checking in render and using the result in the\n  // effect's dependency array works well enough.\n\n  var someDescendantsHaveChanged = descendants.some(function (descendant, index) {\n    var _previousDescendants$;\n\n    return descendant.element !== (previousDescendants === null || previousDescendants === void 0 ? void 0 : (_previousDescendants$ = previousDescendants[index]) === null || _previousDescendants$ === void 0 ? void 0 : _previousDescendants$.element);\n  }); // Prevent any flashing\n\n  useIsomorphicLayoutEffect(function () {\n    if (!descendant.element) forceUpdate();\n    registerDescendant(_extends({}, descendant, {\n      index: index\n    }));\n    return function () {\n      return unregisterDescendant(descendant.element);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [forceUpdate, index, registerDescendant, someDescendantsHaveChanged, unregisterDescendant].concat(Object.values(descendant)));\n  return index;\n}\n\nfunction useDescendantsInit() {\n  return useState([]);\n}\n\nfunction useDescendants(ctx) {\n  return useContext(ctx).descendants;\n}\n\nfunction DescendantProvider(_ref) {\n  var Ctx = _ref.context,\n      children = _ref.children,\n      items = _ref.items,\n      set = _ref.set;\n  var registerDescendant = useCallback(function (_ref2) {\n    var element = _ref2.element,\n        explicitIndex = _ref2.index,\n        rest = _objectWithoutPropertiesLoose(_ref2, [\"element\", \"index\"]);\n\n    if (!element) {\n      return;\n    }\n\n    set(function (items) {\n      var newItems;\n\n      if (explicitIndex != null) {\n        newItems = [].concat(items, [_extends({}, rest, {\n          element: element,\n          index: explicitIndex\n        })]);\n      } else if (items.length === 0) {\n        // If there are no items, register at index 0 and bail.\n        newItems = [].concat(items, [_extends({}, rest, {\n          element: element,\n          index: 0\n        })]);\n      } else if (items.find(function (item) {\n        return item.element === element;\n      })) {\n        // If the element is already registered, just use the same array\n        newItems = items;\n      } else {\n        // When registering a descendant, we need to make sure we insert in\n        // into the array in the same order that it appears in the DOM. So as\n        // new descendants are added or maybe some are removed, we always know\n        // that the array is up-to-date and correct.\n        //\n        // So here we look at our registered descendants and see if the new\n        // element we are adding appears earlier than an existing descendant's\n        // DOM node via `node.compareDocumentPosition`. If it does, we insert\n        // the new element at this index. Because `registerDescendant` will be\n        // called in an effect every time the descendants state value changes,\n        // we should be sure that this index is accurate when descendent\n        // elements come or go from our component.\n        var index = items.findIndex(function (item) {\n          if (!item.element || !element) {\n            return false;\n          } // Does this element's DOM node appear before another item in the\n          // array in our DOM tree? If so, return true to grab the index at\n          // this point in the array so we know where to insert the new\n          // element.\n\n\n          return Boolean(item.element.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_PRECEDING);\n        });\n\n        var newItem = _extends({}, rest, {\n          element: element,\n          index: index\n        }); // If an index is not found we will push the element to the end.\n\n\n        if (index === -1) {\n          newItems = [].concat(items, [newItem]);\n        } else {\n          newItems = [].concat(items.slice(0, index), [newItem], items.slice(index));\n        }\n      }\n\n      return newItems.map(function (item, index) {\n        return _extends({}, item, {\n          index: index\n        });\n      });\n    });\n  }, // set is a state setter initialized by the useDescendantsInit hook.\n  // We can safely ignore the lint warning here because it will not change\n  // between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  var unregisterDescendant = useCallback(function (element) {\n    if (!element) {\n      return;\n    }\n\n    set(function (items) {\n      return items.filter(function (item) {\n        return element !== item.element;\n      });\n    });\n  }, // set is a state setter initialized by the useDescendantsInit hook.\n  // We can safely ignore the lint warning here because it will not change\n  // between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  []);\n  return createElement(Ctx.Provider, {\n    value: useMemo(function () {\n      return {\n        descendants: items,\n        registerDescendant: registerDescendant,\n        unregisterDescendant: unregisterDescendant\n      };\n    }, [items, registerDescendant, unregisterDescendant])\n  }, children);\n}\n/**\r\n * Testing this as an abstraction for compound components that use keyboard\r\n * navigation. Hoping this will help us prevent bugs and mismatched behavior\r\n * across various components, but it may also prove to be too messy of an\r\n * abstraction in the end.\r\n *\r\n * Currently used in:\r\n *   - Tabs\r\n *   - Accordion\r\n *\r\n * @param context\r\n * @param options\r\n */\n\n\nfunction useDescendantKeyDown(context, options) {\n  var _React$useContext2 = useContext(context),\n      descendants = _React$useContext2.descendants;\n\n  var callback = options.callback,\n      currentIndex = options.currentIndex,\n      filter = options.filter,\n      _options$key = options.key,\n      key = _options$key === void 0 ? \"index\" : _options$key,\n      _options$orientation = options.orientation,\n      orientation = _options$orientation === void 0 ? \"vertical\" : _options$orientation,\n      _options$rotate = options.rotate,\n      rotate = _options$rotate === void 0 ? true : _options$rotate,\n      _options$rtl = options.rtl,\n      rtl = _options$rtl === void 0 ? false : _options$rtl;\n  var index = currentIndex !== null && currentIndex !== void 0 ? currentIndex : -1;\n  return function handleKeyDown(event) {\n    if (![\"ArrowDown\", \"ArrowUp\", \"ArrowLeft\", \"ArrowRight\", \"PageUp\", \"PageDown\", \"Home\", \"End\"].includes(event.key)) {\n      return;\n    } // If we use a filter function, we need to re-index our descendants array\n    // so that filtered descendent elements aren't selected.\n\n\n    var selectableDescendants = filter ? descendants.filter(filter) : descendants; // Current index should map to the updated array vs. the original\n    // descendants array.\n\n    if (filter) {\n      index = selectableDescendants.findIndex(function (descendant) {\n        return descendant.index === currentIndex;\n      });\n    } // We need some options for any of this to work!\n\n\n    if (!selectableDescendants.length) {\n      return;\n    }\n\n    function getNextOption() {\n      var atBottom = index === selectableDescendants.length - 1;\n      return atBottom ? rotate ? getFirstOption() : selectableDescendants[index] : selectableDescendants[(index + 1) % selectableDescendants.length];\n    }\n\n    function getPreviousOption() {\n      var atTop = index === 0;\n      return atTop ? rotate ? getLastOption() : selectableDescendants[index] : selectableDescendants[(index - 1 + selectableDescendants.length) % selectableDescendants.length];\n    }\n\n    function getFirstOption() {\n      return selectableDescendants[0];\n    }\n\n    function getLastOption() {\n      return selectableDescendants[selectableDescendants.length - 1];\n    }\n\n    switch (event.key) {\n      case \"ArrowDown\":\n        if (orientation === \"vertical\" || orientation === \"both\") {\n          event.preventDefault();\n          var next = getNextOption();\n          callback(key === \"option\" ? next : next[key]);\n        }\n\n        break;\n\n      case \"ArrowUp\":\n        if (orientation === \"vertical\" || orientation === \"both\") {\n          event.preventDefault();\n          var prev = getPreviousOption();\n          callback(key === \"option\" ? prev : prev[key]);\n        }\n\n        break;\n\n      case \"ArrowLeft\":\n        if (orientation === \"horizontal\" || orientation === \"both\") {\n          event.preventDefault();\n          var nextOrPrev = (rtl ? getNextOption : getPreviousOption)();\n          callback(key === \"option\" ? nextOrPrev : nextOrPrev[key]);\n        }\n\n        break;\n\n      case \"ArrowRight\":\n        if (orientation === \"horizontal\" || orientation === \"both\") {\n          event.preventDefault();\n          var prevOrNext = (rtl ? getPreviousOption : getNextOption)();\n          callback(key === \"option\" ? prevOrNext : prevOrNext[key]);\n        }\n\n        break;\n\n      case \"PageUp\":\n        event.preventDefault();\n        var prevOrFirst = (event.ctrlKey ? getPreviousOption : getFirstOption)();\n        callback(key === \"option\" ? prevOrFirst : prevOrFirst[key]);\n        break;\n\n      case \"Home\":\n        event.preventDefault();\n        var first = getFirstOption();\n        callback(key === \"option\" ? first : first[key]);\n        break;\n\n      case \"PageDown\":\n        event.preventDefault();\n        var nextOrLast = (event.ctrlKey ? getNextOption : getLastOption)();\n        callback(key === \"option\" ? nextOrLast : nextOrLast[key]);\n        break;\n\n      case \"End\":\n        event.preventDefault();\n        var last = getLastOption();\n        callback(key === \"option\" ? last : last[key]);\n        break;\n    }\n  };\n}\n\nexport { DescendantProvider, createDescendantContext, useDescendant, useDescendantKeyDown, useDescendants, useDescendantsInit };","map":{"version":3,"sources":["../src/index.tsx"],"names":["initialValue","descendants","createNamedContext","registerDescendant","unregisterDescendant","noop","forceUpdate","useForceUpdate","React","index","indexProp","item","descendant","previousDescendants","usePrevious","someDescendantsHaveChanged","useIsomorphicLayoutEffect","Object","context","Ctx","children","items","set","element","explicitIndex","rest","newItems","Boolean","Node","newItem","value","callback","currentIndex","filter","key","orientation","rotate","rtl","options","event","selectableDescendants","atBottom","getFirstOption","atTop","getLastOption","next","getNextOption","prev","getPreviousOption","nextOrPrev","prevOrNext","prevOrFirst","first","nextOrLast","last"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  createNamedContext,\n  noop,\n  useForceUpdate,\n  useIsomorphicLayoutEffect,\n  usePrevious,\n} from \"@reach/utils\";\n\nfunction createDescendantContext<DescendantType extends Descendant>(\n  name: string,\n  initialValue = {}\n) {\n  type T = DescendantContextValue<DescendantType>;\n  const descendants: DescendantType[] = [];\n  return createNamedContext<T>(name, {\n    descendants,\n    registerDescendant: noop,\n    unregisterDescendant: noop,\n    ...initialValue,\n  });\n}\n\n/**\n * This hook registers our descendant by passing it into an array. We can then\n * search that array by to find its index when registering it in the component.\n * We use this for focus management, keyboard navigation, and typeahead\n * functionality for some components.\n *\n * The hook accepts the element node and (optionally) a key. The key is useful\n * if multiple descendants have identical text values and we need to\n * differentiate siblings for some reason.\n *\n * Our main goals with this are:\n *   1) maximum composability,\n *   2) minimal API friction\n *   3) SSR compatibility*\n *   4) concurrent safe\n *   5) index always up-to-date with the tree despite changes\n *   6) works with memoization of any component in the tree (hopefully)\n *\n * * As for SSR, the good news is that we don't actually need the index on the\n * server for most use-cases, as we are only using it to determine the order of\n * composed descendants for keyboard navigation. However, in the few cases where\n * this is not the case, we can require an explicit index from the app.\n */\nfunction useDescendant<DescendantType extends Descendant>(\n  descendant: Omit<DescendantType, \"index\">,\n  context: React.Context<DescendantContextValue<DescendantType>>,\n  indexProp?: number\n) {\n  let forceUpdate = useForceUpdate();\n  let {\n    registerDescendant,\n    unregisterDescendant,\n    descendants,\n  } = React.useContext(context);\n\n  // This will initially return -1 because we haven't registered the descendant\n  // on the first render. After we register, this will then return the correct\n  // index on the following render and we will re-register descendants\n  // so that everything is up-to-date before the user interacts with a\n  // collection.\n  let index =\n    indexProp ??\n    descendants.findIndex((item) => item.element === descendant.element);\n\n  let previousDescendants = usePrevious(descendants);\n\n  // We also need to re-register descendants any time ANY of the other\n  // descendants have changed. My brain was melting when I wrote this and it\n  // feels a little off, but checking in render and using the result in the\n  // effect's dependency array works well enough.\n  let someDescendantsHaveChanged = descendants.some((descendant, index) => {\n    return descendant.element !== previousDescendants?.[index]?.element;\n  });\n\n  // Prevent any flashing\n  useIsomorphicLayoutEffect(() => {\n    if (!descendant.element) forceUpdate();\n    registerDescendant({\n      ...descendant,\n      index,\n    } as DescendantType);\n    return () => unregisterDescendant(descendant.element);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    forceUpdate,\n    index,\n    registerDescendant,\n    someDescendantsHaveChanged,\n    unregisterDescendant,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    ...Object.values(descendant),\n  ]);\n\n  return index;\n}\n\nfunction useDescendantsInit<DescendantType extends Descendant>() {\n  return React.useState<DescendantType[]>([]);\n}\n\nfunction useDescendants<DescendantType extends Descendant>(\n  ctx: React.Context<DescendantContextValue<DescendantType>>\n) {\n  return React.useContext(ctx).descendants;\n}\n\nfunction DescendantProvider<DescendantType extends Descendant>({\n  context: Ctx,\n  children,\n  items,\n  set,\n}: {\n  context: React.Context<DescendantContextValue<DescendantType>>;\n  children: React.ReactNode;\n  items: DescendantType[];\n  set: React.Dispatch<React.SetStateAction<DescendantType[]>>;\n}) {\n  let registerDescendant = React.useCallback(\n    ({\n      element,\n      index: explicitIndex,\n      ...rest\n    }: Omit<DescendantType, \"index\"> & { index?: number | undefined }) => {\n      if (!element) {\n        return;\n      }\n\n      set((items) => {\n        let newItems: DescendantType[];\n        if (explicitIndex != null) {\n          newItems = [\n            ...items,\n            {\n              ...rest,\n              element,\n              index: explicitIndex,\n            } as DescendantType,\n          ];\n        } else if (items.length === 0) {\n          // If there are no items, register at index 0 and bail.\n          newItems = [\n            ...items,\n            {\n              ...rest,\n              element,\n              index: 0,\n            } as DescendantType,\n          ];\n        } else if (items.find((item) => item.element === element)) {\n          // If the element is already registered, just use the same array\n          newItems = items;\n        } else {\n          // When registering a descendant, we need to make sure we insert in\n          // into the array in the same order that it appears in the DOM. So as\n          // new descendants are added or maybe some are removed, we always know\n          // that the array is up-to-date and correct.\n          //\n          // So here we look at our registered descendants and see if the new\n          // element we are adding appears earlier than an existing descendant's\n          // DOM node via `node.compareDocumentPosition`. If it does, we insert\n          // the new element at this index. Because `registerDescendant` will be\n          // called in an effect every time the descendants state value changes,\n          // we should be sure that this index is accurate when descendent\n          // elements come or go from our component.\n          let index = items.findIndex((item) => {\n            if (!item.element || !element) {\n              return false;\n            }\n            // Does this element's DOM node appear before another item in the\n            // array in our DOM tree? If so, return true to grab the index at\n            // this point in the array so we know where to insert the new\n            // element.\n            return Boolean(\n              item.element.compareDocumentPosition(element as Node) &\n                Node.DOCUMENT_POSITION_PRECEDING\n            );\n          });\n\n          let newItem = {\n            ...rest,\n            element,\n            index,\n          } as DescendantType;\n\n          // If an index is not found we will push the element to the end.\n          if (index === -1) {\n            newItems = [...items, newItem];\n          } else {\n            newItems = [\n              ...items.slice(0, index),\n              newItem,\n              ...items.slice(index),\n            ];\n          }\n        }\n        return newItems.map((item, index) => ({ ...item, index }));\n      });\n    },\n    // set is a state setter initialized by the useDescendantsInit hook.\n    // We can safely ignore the lint warning here because it will not change\n    // between renders.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  let unregisterDescendant = React.useCallback(\n    (element: DescendantType[\"element\"]) => {\n      if (!element) {\n        return;\n      }\n\n      set((items) => items.filter((item) => element !== item.element));\n    },\n    // set is a state setter initialized by the useDescendantsInit hook.\n    // We can safely ignore the lint warning here because it will not change\n    // between renders.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  return (\n    <Ctx.Provider\n      value={React.useMemo(() => {\n        return {\n          descendants: items,\n          registerDescendant,\n          unregisterDescendant,\n        };\n      }, [items, registerDescendant, unregisterDescendant])}\n    >\n      {children}\n    </Ctx.Provider>\n  );\n}\n\n/**\n * Testing this as an abstraction for compound components that use keyboard\n * navigation. Hoping this will help us prevent bugs and mismatched behavior\n * across various components, but it may also prove to be too messy of an\n * abstraction in the end.\n *\n * Currently used in:\n *   - Tabs\n *   - Accordion\n *\n * @param context\n * @param options\n */\nfunction useDescendantKeyDown<\n  DescendantType extends Descendant,\n  K extends keyof DescendantType = keyof DescendantType\n>(\n  context: React.Context<DescendantContextValue<DescendantType>>,\n  options: {\n    currentIndex: number | null | undefined;\n    key?: K | \"option\";\n    filter?: (descendant: DescendantType) => boolean;\n    orientation?: \"vertical\" | \"horizontal\" | \"both\";\n    rotate?: boolean;\n    rtl?: boolean;\n    callback(nextOption: DescendantType | DescendantType[K]): void;\n  }\n) {\n  let { descendants } = React.useContext(context);\n  let {\n    callback,\n    currentIndex,\n    filter,\n    key = \"index\" as K,\n    orientation = \"vertical\",\n    rotate = true,\n    rtl = false,\n  } = options;\n  let index = currentIndex ?? -1;\n\n  return function handleKeyDown(event: React.KeyboardEvent) {\n    if (\n      ![\n        \"ArrowDown\",\n        \"ArrowUp\",\n        \"ArrowLeft\",\n        \"ArrowRight\",\n        \"PageUp\",\n        \"PageDown\",\n        \"Home\",\n        \"End\",\n      ].includes(event.key)\n    ) {\n      return;\n    }\n\n    // If we use a filter function, we need to re-index our descendants array\n    // so that filtered descendent elements aren't selected.\n    let selectableDescendants = filter\n      ? descendants.filter(filter)\n      : descendants;\n\n    // Current index should map to the updated array vs. the original\n    // descendants array.\n    if (filter) {\n      index = selectableDescendants.findIndex(\n        (descendant) => descendant.index === currentIndex\n      );\n    }\n\n    // We need some options for any of this to work!\n    if (!selectableDescendants.length) {\n      return;\n    }\n\n    function getNextOption() {\n      let atBottom = index === selectableDescendants.length - 1;\n      return atBottom\n        ? rotate\n          ? getFirstOption()\n          : selectableDescendants[index]\n        : selectableDescendants[(index + 1) % selectableDescendants.length];\n    }\n\n    function getPreviousOption() {\n      let atTop = index === 0;\n      return atTop\n        ? rotate\n          ? getLastOption()\n          : selectableDescendants[index]\n        : selectableDescendants[\n            (index - 1 + selectableDescendants.length) %\n              selectableDescendants.length\n          ];\n    }\n\n    function getFirstOption() {\n      return selectableDescendants[0];\n    }\n\n    function getLastOption() {\n      return selectableDescendants[selectableDescendants.length - 1];\n    }\n\n    switch (event.key) {\n      case \"ArrowDown\":\n        if (orientation === \"vertical\" || orientation === \"both\") {\n          event.preventDefault();\n          let next = getNextOption();\n          callback(key === \"option\" ? next : next[key]);\n        }\n        break;\n      case \"ArrowUp\":\n        if (orientation === \"vertical\" || orientation === \"both\") {\n          event.preventDefault();\n          let prev = getPreviousOption();\n          callback(key === \"option\" ? prev : prev[key]);\n        }\n        break;\n      case \"ArrowLeft\":\n        if (orientation === \"horizontal\" || orientation === \"both\") {\n          event.preventDefault();\n          let nextOrPrev = (rtl ? getNextOption : getPreviousOption)();\n          callback(key === \"option\" ? nextOrPrev : nextOrPrev[key]);\n        }\n        break;\n      case \"ArrowRight\":\n        if (orientation === \"horizontal\" || orientation === \"both\") {\n          event.preventDefault();\n          let prevOrNext = (rtl ? getPreviousOption : getNextOption)();\n          callback(key === \"option\" ? prevOrNext : prevOrNext[key]);\n        }\n        break;\n      case \"PageUp\":\n        event.preventDefault();\n        let prevOrFirst = (event.ctrlKey\n          ? getPreviousOption\n          : getFirstOption)();\n        callback(key === \"option\" ? prevOrFirst : prevOrFirst[key]);\n        break;\n      case \"Home\":\n        event.preventDefault();\n        let first = getFirstOption();\n        callback(key === \"option\" ? first : first[key]);\n        break;\n      case \"PageDown\":\n        event.preventDefault();\n        let nextOrLast = (event.ctrlKey ? getNextOption : getLastOption)();\n        callback(key === \"option\" ? nextOrLast : nextOrLast[key]);\n        break;\n      case \"End\":\n        event.preventDefault();\n        let last = getLastOption();\n        callback(key === \"option\" ? last : last[key]);\n        break;\n    }\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Types\n\ntype SomeElement<T> = T extends Element ? T : HTMLElement;\n\ntype Descendant<ElementType = HTMLElement> = {\n  element: SomeElement<ElementType> | null;\n  index: number;\n};\n\ninterface DescendantContextValue<DescendantType extends Descendant> {\n  descendants: DescendantType[];\n  registerDescendant(descendant: DescendantType): void;\n  unregisterDescendant(element: DescendantType[\"element\"]): void;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Exports\n\nexport type { Descendant, DescendantContextValue };\nexport {\n  createDescendantContext,\n  DescendantProvider,\n  useDescendant,\n  useDescendantKeyDown,\n  useDescendants,\n  useDescendantsInit,\n};\n"]},"metadata":{},"sourceType":"module"}